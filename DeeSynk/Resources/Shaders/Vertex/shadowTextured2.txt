#version 450 core

layout (location = 0) in vec4 position;
layout (location = 2) in vec2 texCoord;
layout (location = 3) in vec4 offset;
layout (location = 13) uniform mat4 modelMat;

//UBO_BINDINGS
layout(binding = 2) uniform Camera
{
	mat4 projection;  //model_view
	vec4 location; //cameraLoc
} camera;

layout(binding = 3) uniform SpotLight
{
	mat4 spotLightView;
	vec4 spotLightLocation;
	vec4 spotLightLookAt;
	vec4 spotLightColor;
	vec4 spotLightFOV;
} spotLights[4];

//OUTS
out vec2 vs_texCoord;
out vec4 vs_lightCoord;
out vec3 vs_lookAt;
out vec3 vs_transPos;

void main(void)
{
 vs_texCoord = texCoord;
 vs_lightCoord = spotLights[0].spotLightView * modelMat * (- position - offset);
 vs_lookAt = normalize((spotLights[0].spotLightLookAt - spotLights[0].spotLightLocation).xyz);
 vec4 pos = modelMat * position;
 vs_transPos = (pos - spotLights[0].spotLightLocation).xyz;

 gl_Position = camera.projection * modelMat * (position + offset);
}