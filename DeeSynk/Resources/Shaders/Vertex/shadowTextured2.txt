#version 450 core

layout (location = 0) in vec4 position;
layout (location = 2) in vec2 texCoord;
layout (location = 3) in vec4 offset;
layout (location = 13) uniform mat4 modelMat;

//UBO_BINDINGS
layout(binding = 2) uniform Camera
{
	mat4 projection;  //model_view
	vec4 location; //cameraLoc
} camera;

layout(binding = 3) uniform SpotLight
{
	mat4 spotLightView;
	vec4 spotLightLocation;
	vec4 spotLightLookAt;
	vec4 spotLightColor;
	vec4 spotLightFOV;
} spotLights[4];



//OUTS
out vec2 vs_texCoord;
out vec4 vs_lightCoord[4];
out vec3 vs_TransPosiSpot[4];

void main(void)
{
 vs_texCoord = texCoord;


 vs_lightCoord[0] = spotLights[0].spotLightView * modelMat * (- position - offset);
 vs_lightCoord[1] = spotLights[1].spotLightView * modelMat * (- position - offset);
 vs_lightCoord[2] = spotLights[2].spotLightView * modelMat * (- position - offset);
 vs_lightCoord[3] = spotLights[3].spotLightView * modelMat * (- position - offset);

 vec4 pos = modelMat * position;

 vs_TransPosiSpot[0] = (pos - spotLights[0].spotLightLocation).xyz;
 vs_TransPosiSpot[1] = (pos - spotLights[1].spotLightLocation).xyz;
 vs_TransPosiSpot[2] = (pos - spotLights[2].spotLightLocation).xyz;
 vs_TransPosiSpot[3] = (pos - spotLights[3].spotLightLocation).xyz;

 gl_Position = camera.projection * modelMat * (position + offset);
}

/*
struct SpotL
{
	mat4 view;
	vec4 location;
	vec4 lookAt;
	vec4 color;
	vec4 FOV;
};

layout(binding = 7) uniform SpotLights
{
	SpotL spotLights[4];
};*/