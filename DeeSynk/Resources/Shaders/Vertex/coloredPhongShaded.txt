#version 450 core

layout (location = 0) in vec4 position;
layout (location = 1) in vec3 normal;
layout (location = 13) uniform mat4 modelMat;
layout (location = 17) uniform vec4 color;

layout(binding = 2) uniform Camera
{
	mat4 projection;  //model_view
	vec4 camLocation; //cameraLoc
} camera;

layout(binding = 3) uniform Light
{
	mat4 view;
	vec4 lightLocation;
	vec4 lightColor;
	vec4 shadowColor;
} lights[4];


out vec4 vs_lightCoord;

//up is old
//down is new

out vec3 vs_EyeCoord;
out vec3 vs_Normal;

void main(void)
{
	vs_lightCoord = lights[0].view * modelMat * position;
    gl_Position = camera.projection * modelMat * position;

	mat4 mmN = inverse(modelMat);
	mmN[3] = vec4(0.0,0.0,0.0,1.0);
	mmN = inverse(mmN);

	vs_EyeCoord = (modelMat * (position)).xyz;
	vs_Normal = (mmN * vec4(normal, 1.0)).xyz;
}