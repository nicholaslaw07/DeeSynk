#version 450 core

layout(triangles) in;
layout(line_strip, max_vertices = 2) out;

out vec4 outputVector;

layout(binding = 2) uniform Camera
{
	mat4 projection;  //model_view
	vec4 camLocation; //cameraLoc
} camera;

layout(binding = 3) uniform SpotLight
{
	mat4 spotLightView;
	vec4 spotLightLocation;
	vec4 spotLightLookAt;
	vec4 spotLightColor;
	vec4 spotLightFOV;
} spotLights[4];

layout(binding=7) uniform SunLamp
{
	mat4 sunLampView;
	vec4 sunLampLocation;
	vec4 sunLampLookAt;
	vec4 sunLampColor;
	vec4 sunLampViewProps;
} sunLamps[4];

in vs_Out
{
	vec3 vs_normal;
} gs_in[];

void main(void)
{
	vec3 lightLookAtNorm = -normalize(sunLamps[0].sunLampLookAt.xyz);

	bool GE0_lADotN0 = dot(lightLookAtNorm, gs_in[0].vs_normal) >= 0;
	bool GE0_lADotN1 = dot(lightLookAtNorm, gs_in[1].vs_normal) >= 0;
	bool GE0_lADotN2 = dot(lightLookAtNorm, gs_in[2].vs_normal) >= 0;

	if(GE0_lADotN0 && GE0_lADotN1 && GE0_lADotN2)
		EndPrimitive();
	else
	{
		if(GE0_lADotN0)
		{
			if(GE0_lADotN1)
			{
				gl_Position = gl_in[0].gl_Position;
				outputVector = gl_Position;
				EmitVertex();

				gl_Position = gl_in[1].gl_Position;
				outputVector = gl_Position;
				EmitVertex();

				EndPrimitive();
			}
			if(GE0_lADotN2)
			{
				gl_Position = gl_in[0].gl_Position;
				outputVector = gl_Position;
				EmitVertex();

				gl_Position = gl_in[2].gl_Position;
				outputVector = gl_Position;
				EmitVertex();

				EndPrimitive();
			}
		}

		if(GE0_lADotN1 && GE0_lADotN2)
		{
			gl_Position = gl_in[1].gl_Position;
			outputVector = gl_Position;
			EmitVertex();

			gl_Position = gl_in[2].gl_Position;
			outputVector = gl_Position;
			EmitVertex();

			EndPrimitive();
		}
	}
}