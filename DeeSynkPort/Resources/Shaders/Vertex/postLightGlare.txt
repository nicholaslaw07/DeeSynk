#version 450 core

layout (location = 0) in vec4 position;
layout (location = 2) in vec2 texCoord;
layout (location = 3) in vec4 offset;
layout (location = 5) uniform mat4 model_view;
layout(location = 13) uniform mat4 modelMat;

//UBO_BINDINGS
layout(binding = 2) uniform Camera
{
	mat4 projection;  //model_view
	vec4 location; //cameraLoc
	vec4 sizeParams; //fov, width, height, aspect
	vec4 lookAt;
} camera;

layout(binding = 3) uniform SpotLight
{
	mat4 spotLightView;
	vec4 spotLightLocation;
	vec4 spotLightLookAt;
	vec4 spotLightColor;
	vec4 spotLightFOV;
} spotLights[4];

layout(binding=7) uniform SunLamp
{
	mat4 sunLampView;
	vec4 sunLampLocation;
	vec4 sunLampLookAt;
	vec4 sunLampColor;
	vec4 sunLampViewProps;
} sunLamps[4];

layout(binding = 11) uniform PostCamera
{
	mat4 projection;  //model_view
	vec4 location; //cameraLoc
} postCamera;

out vec2 vs_texCoord;
out vec4 vs_lightPosTSpot[4];
out vec4 vs_lightPosTSun[4];
out vec4 vs_lightCoordSpot[4];
out vec4 vs_lightCoordSun[4];

void main(void)
{
	vs_texCoord = texCoord;

	for(int i=0; i<4; i++)
	{
		vs_lightPosTSpot[i] = camera.projection * spotLights[i].spotLightLocation;
		vs_lightPosTSun[i] = camera.projection * sunLamps[i].sunLampLocation;
		vs_lightCoordSpot[i] = spotLights[i].spotLightView * (camera.location);
		vs_lightCoordSun[i] = sunLamps[i].sunLampView * (camera.location);
	}

	gl_Position = postCamera.projection * modelMat * (position + offset);
}